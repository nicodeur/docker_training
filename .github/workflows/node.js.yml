# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on: [push, pull_request]


jobs:
  build:
    defaults:
      run:
        shell: bash
        working-directory: tutoapi

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2 # https://github.com/actions/cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run build
      - run: ls -al
      - run: npm test
#      - run: tar czvf tutoapi.tar.gz built
      - uses: actions/upload-artifact@master
        with:
          name: tutoapi
          path: tutoapi/built

  sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run : echo "sonar"

  docker-tutoapi:
    needs: build
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: nicodeur/tutoapi:latest
      DOCKER_DIRECTORY: tutoapi
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: tutoapi
          path: built
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_DIRECTORY }}
          file: ./${{ env.DOCKER_DIRECTORY }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker-database:
    needs: build
    runs-on: ubuntu-latest
    env:
      DOCKER_TAG: nicodeur/tutobdd:latest
      DOCKER_DIRECTORY: bdd
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_DIRECTORY }}
          file: ./${{ env.DOCKER_DIRECTORY }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  deploy-production:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'master_copy'}}
    steps:
      - uses: actions/checkout@v2
      - run : echo "deploy on production"
